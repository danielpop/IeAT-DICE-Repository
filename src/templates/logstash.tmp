
input {
{% if 'yarn' in roles %}
    lumberjack{
    port =>5000
    ssl_certificate => "{{sslcert}}"
    ssl_key=> "{{sslkey}}"
}
{% else %}
#No lumberjack needed
{% endif %}

{% if 'spark' in roles%}
graphite{
    mode => server
    port => 5002
    type => "graphite"
}
{% else %}
# No spark role found
{% endif%}

udp {
    port => {{udpPort}}         # 25826 matches port specified in collectd.conf
    buffer_size => 1452   # 1452 is the default buffer size for Collectd
    codec => collectd { } # specific Collectd codec to invoke
    type => collectd
}

{% if 'storm' not in roles %}
 #Storm role not defined
    {% elif StormRestIP == "None"%}
    #No Storm IP set
  
    {% elif StormRestPort == "None"%}
    #No Storm Port set
    

    {% elif StormTopologyID == "None"%}
    #No Storm Topology set
    
  {% else %}
http_poller {
  urls => {
    Topology => {
      method => get
      url => "http://{{StormRestIP}}:{{StormRestPort}}/api/v1/topology/{{StormTopologyID}}"
      headers => {
      Accept => "application/json"
      }
    }
  }
    request_timeout => 60
    interval => {{storm_interval}}
    codec => "json"
    # A hash of request metadata info (timing, response headers, etc.) will be sent here
    # metadata_target => "http_poller_metadata"
    type =>"storm-topology"
}

http_poller {
  urls =>{
    ClusterSummary =>{
      method => get
      url => "http://{{StormRestIP}}:{{StormRestPort}}/api/v1/cluster/summary"
      headers => {
      Accept => "application/json"
      }
    }
  }
    request_timeout => 60
    interval => {{storm_interval}}
    codec => "json"
    # A hash of request metadata info (timing, response headers, etc.) will be sent here
    # metadata_target => "http_poller_metadata"
    type =>"storm-cluster"
}

http_poller{
  urls =>{
    TopologyList =>{
      method => get
      url => "http://{{StormRestIP}}:{{StormRestPort}}/api/v1/topology/summary"
      headers => {
      Accept => "application/json"
      }
    }
  }
    request_timeout => 60
    interval => {{storm_interval}}
    codec => "json"
    # A hash of request metadata info (timing, response headers, etc.) will be sent here
    # metadata_target => "http_poller_metadata"
    type =>"storm-topSum"
}
  {% endif %}
}

filter{
{% if 'spark' in roles%}
if [type]=="graphite"{
 grok{
  break_on_match => false
  #spark metrics
  match=>["message","\A%{WORD:appID}.%{NOTSPACE:sparkMetric} %{NUMBER:Value} %{NUMBER:timestamp}"]
}
}
{% else %}
#No spark node defined
{% endif %}


{% if 'storm' in roles %}
if [type] == "storm-topology"{
  ruby {
        code => "
  event.to_hash.keys.each { |k| event[ k.gsub('.','_') ] = event.remove(k) if k.include?'.' }
  params = event['configuration'] && event['configuration'].to_hash
        params.keys.each { |k| params[ k.gsub('.','_') ] = params.delete(k) if k.include?'.' } unless params.nil?
       "
       add_field =>{
       {% for i in range(nBolt) %}
       "bolts_{{i}}_executors" => "%{[bolts][{{i}}][executors]}"
       "bolts_{{i}}_emitted" => "%{[bolts][{{i}}][emitted]}"
       "bolts_{{i}}_errorLapsedSecs" => "%{[bolts][{{i}}][errorLapsedSecs]}"
       "bolts_{{i}}_transferred" => "%{[bolts][{{i}}][transferred]}"
       "bolts_{{i}}_acked" => "%{[bolts][{{i}}][acked]}"
       "bolts_{{i}}_errorPort" => "%{[bolts][{{i}}][errorPort]}"
       "bolts_{{i}}_executeLatency" => "%{[bolts][{{i}}][executeLatency]}"
       "bolts_{{i}}_tasks" => "%{[bolts][{{i}}][tasks]}"
       "bolts_{{i}}_executed" => "%{[bolts][{{i}}][executed]}"
       "bolts_{{i}}_processLatency" => "%{[bolts][{{i}}][processLatency]}"
       "bolts_{{i}}_boltId" => "%{[bolts][{{i}}][boltId]}"
       "bolts_{{i}}_errorHost" => "%{[bolts][{{i}}][errorHost]}"
       "bolts_{{i}}_lastError" => "%{[bolts][{{i}}][lastError]}"
       "bolts_{{i}}_errorWorkerLogLink" => "%{[bolts][{{i}}][errorWorkerLogLink]}"
       "bolts_{{i}}_capacity" => "%{[bolts][{{i}}][capacity]}"
       "bolts_{{i}}_failed" => "%{[bolts][{{i}}][failed]}"
       "bolts_{{i}}_encodedBoltId" => "%{[bolts][{{i}}][encodedBoltId]}"
       {% endfor %}
       
      {% for n in range(nSpout) %}
       "spouts_{{n}}_executors" => "%{[spouts][{{n}}][executors]}"
       "spouts_{{n}}_emitted" => "%{[spouts][{{n}}][emitted]}"
       "spouts_{{n}}_errorLapsedSecs" => "%{[spouts][{{n}}][errorLapsedSecs]}"
       "spouts_{{n}}_completeLatency" => "%{[spouts][{{n}}][completeLatency]}"
       "spouts_{{n}}_transferred" => "%{[spouts][{{n}}][transferred]}"
       "spouts_{{n}}_acked" => "%{[spouts][{{n}}][acked]}"
       "spouts_{{n}}_errorPort" => "%{[spouts][{{n}}][errorPort]}"
       "spouts_{{n}}_spoutId" => "%{[spouts][{{n}}][spoutId]}"
       "spouts_{{n}}_tasks" => "%{[spouts][{{n}}][tasks]}"
       "spouts_{{n}}_errorHost" => "%{[spouts][{{n}}][errorHost]}"
       "spouts_{{n}}_lastError" => "%{[spouts][{{n}}][lastError]}"
       "spouts_{{n}}_errorWorkerLogLink" => "%{[spouts][{{n}}][errorWorkerLogLink]}"
       "spouts_{{n}}_failed" => "%{[spouts][{{n}}][failed]}"
       "spouts_{{n}}_encodedSpoutId" => "%{[spouts][{{n}}][encodedSpoutId]}"
       {% endfor %}
       
       "topologyStats_10m_window" => "%{[topologyStats][0][window]}"
       "topologyStats_10m_emitted" => "%{[topologyStats][0][emitted]}"
       "topologyStats_10m_transferred" => "%{[topologyStats][0][transferred]}"
       "topologyStats_10m_completeLatency" => "%{[topologyStats][0][completeLatency]}"
       "topologyStats_10m_acked" => "%{[topologyStats][0][acked]}"
       "topologyStats_10m_failed" => "%{[topologyStats][0][failed]}"

       "topologyStats_3h_window" => "%{[topologyStats][1][window]}"
       "topologyStats_3h_emitted" => "%{[topologyStats][1][emitted]}"
       "topologyStats_3h_transferred" => "%{[topologyStats][1][transferred]}"
       "topologyStats_3h_completeLatency" => "%{[topologyStats][1][completeLatency]}"
       "topologyStats_3h_acked" => "%{[topologyStats][1][acked]}"
       "topologyStats_3h_failed" => "%{[topologyStats][1][failed]}"

       "topologyStats_1d_window" => "%{[topologyStats][2][window]}"
       "topologyStats_1d_emitted" => "%{[topologyStats][2][emitted]}"
       "topologyStats_1d_transferred" => "%{[topologyStats][2][transferred]}"
       "topologyStats_1d_completeLatency" => "%{[topologyStats][2][completeLatency]}"
       "topologyStats_1d_acked" => "%{[topologyStats][2][acked]}"
       "topologyStats_1d_failed" => "%{[topologyStats][2][failed]}"

       "topologyStats_all_window" => "%{[topologyStats][3][window]}"
       "topologyStats_all_emitted" => "%{[topologyStats][3][emitted]}"
       "topologyStats_all_transferred" => "%{[topologyStats][3][transferred]}"
       "topologyStats_all_completeLatency" => "%{[topologyStats][3][completeLatency]}"
       "topologyStats_all_acked" => "%{[topologyStats][3][acked]}"
       "topologyStats_all_failed" => "%{[topologyStats][3][failed]}"
       }
       remove_field => ["bolts", "spouts", "visualizationTable", "topologyStats"]
    }
}
if [type] == "storm-topSum"{
  mutate {
    add_field =>{
      "topology_0_id" => "%{[topologies][0][id]}"
      "topology_0_encodedId" => "%{[topologies][0][encodedId]}"
      "topology_0_name" => "%{[topologies][0][name]}"
      "topology_0_status" => "%{[topologies][0][status]}"
      "topology_0_uptime" => "%{[topologies][0][uptime]}"
      "topology_0_tasksTotal" => "%{[topologies][0][tasksTotal]}"
      "topology_0_workersTotal" => "%{[topologies][0][workersTotal]}"
      "topology_0_executorsTotal" => "%{[topologies][0][executorsTotal]}"
    }
    remove_field => ["topologies"]
  }
}
{% else %}
##Storm role not defined
{% endif %}

{% if 'yarn' in roles %}
if [type]=="nodemanager-metrics"{ #same as set in logstash-forwarder configuration json
  grok{
    break_on_match => false
    #metricssystem.MetricsSystem
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, NumActiveSources=%{NUMBER:NumActiveSources:int}, NumAllSources=%{NUMBER:NumAllSources:int}, NumActiveSinks=%{NUMBER:NumActiveSinks:int}, NumAllSinks=%{NUMBER:NumAllSinks:int}, Sink_diceNumOps=%{NUMBER:Sink_diceNumOps:int}, Sink_diceAvgTime=%{NUMBER:Sink_diceAvgTime:float}, Sink_diceDropped=%{NUMBER:Sink_diceDropped:int}, Sink_diceQsize=%{NUMBER:Sink_diceQsize:int}, SnapshotNumOps=%{NUMBER:SnapshotNumOps:int}, SnapshotAvgTime=%{NUMBER:SnapshotAvgTime:float}, PublishNumOps=%{NUMBER:PublishNumOps:int}, PublishAvgTime=%{NUMBER:PublishAvgTime:float}, DroppedPubAll=%{NUMBER: DroppedPubAll}"]

    #ugi.UgiMetrics
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, LoginSuccessNumOps=%{NUMBER:LoginSuccessNumOps:int}, LoginSuccessAvgTime=%{NUMBER:LoginSuccessAvgTime:float}, LoginFailureNumOps=%{NUMBER:LoginFailureNumOps:int}, LoginFailureAvgTime=%{NUMBER:LoginFailureAvgTime:float}, GetGroupsNumOps=%{NUMBER:GetGroupsNumOps:int}, GetGroupsAvgTime=%{NUMBER:GetGroupsAvgTime:float}
    "]

    #jvm.JvmMetrics
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, ProcessName=%{WORD:ProcessName}, SessionId=%{WORD:SessionId}, Hostname=%{HOSTNAME:hostname}, MemNonHeapUsedM=%{NUMBER:MemNonHeapUsedM:float}, MemNonHeapCommittedM=%{NUMBER:MemNonHeapCommittedM:float}, MemNonHeapMaxM=%{DATA:MemNonHeapMaxM}, MemHeapUsedM=%{NUMBER:MemHeapUsedM:float}, MemHeapCommittedM=%{NUMBER:MemHeapCommittedM:float}, MemHeapMaxM=%{NUMBER:MemHeapMaxM:float}, MemMaxM=%{NUMBER:MemMaxM:float}, GcCountParNew=%{NUMBER:GcCountParNew:int}, GcTimeMillisParNew=%{NUMBER:GcTimeMillisParNew:float}, GcCountConcurrentMarkSweep=%{NUMBER:GcCountConcurrentMarkSweep:float}, GcTimeMillisConcurrentMarkSweep=%{NUMBER:GcTimeMillisConcurrentMarkSweep:float}, GcCount=%{NUMBER:GcCount:int}, GcTimeMillis=%{NUMBER:GcTimeMillis:float}, ThreadsNew=%{NUMBER:ThreadsNew:int}, ThreadsRunnable=%{NUMBER:ThreadsRunnable:int}, ThreadsBlocked=%{NUMBER:ThreadsBlocked:int}, ThreadsWaiting=%{NUMBER:ThreadsWaiting:int}, ThreadsTimedWaiting=%{NUMBER:ThreadsTimedWaiting:int}, ThreadsTerminated=%{NUMBER:ThreadsTerminated:int}, LogFatal=%{NUMBER:LogFatal:int}, LogError=%{NUMBER:LogError:int}, LogWarn=%{NUMBER:LogWarn:int}, LogInfo=%{NUMBER:LogInfo:int}"]

    #yarn.NodeManagerMetrics
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, ContainersLaunched=%{NUMBER:ContainersLaunched:int}, ContainersCompleted=%{NUMBER:ContainersCompleted:int}, ContainersFailed=%{NUMBER:ContainersFailed:int}, ContainersKilled=%{NUMBER:ContainersKilled:int}, ContainersIniting=%{NUMBER:ContainersIniting:float}, ContainersRunning=%{NUMBER:ContainersRunning:float}, AllocatedGB=%{NUMBER:AllocatedGB:float}, AllocatedContainers=%{NUMBER:AllocatedContainers:int}, AvailableGB=%{NUMBER:AvailableGB:int}, AllocatedVCores=%{NUMBER:AllocatedVCores:int}, AvailableVCores=%{NUMBER:AvailableVCores:int}, ContainerLaunchDurationNumOps=%{NUMBER:ContainerLaunchDurationNumOps:int}, ContainerLaunchDurationAvgTime=%{NUMBER:ContainerLaunchDurationAvgTime:float}"]

    #mapred.ShuffleMetrics
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, ShuffleOutputBytes=%{NUMBER:ShuffleOutputBytes:int}, ShuffleOutputsFailed=%{NUMBER:ShuffleOutputsFailed:int}, ShuffleOutputsOK=%{NUMBER:ShuffleOutputsOK:int}, ShuffleConnections=%{NUMBER:ShuffleConnections:int}"]

    #rpc.rpc
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, ReceivedBytes=%{NUMBER:ReceivedBytes:int}, SentBytes=%{NUMBER:SentBytes:int}, RpcQueueTimeNumOps=%{NUMBER:RpcQueueTimeNumOps:int}, RpcQueueTimeAvgTime=%{NUMBER:RpcQueueTimeAvgTime:float}, RpcProcessingTimeNumOps=%{NUMBER:RpcProcessingTimeNumOps:int}, RpcProcessingTimeAvgTime=%{NUMBER:RpcProcessingTimeAvgTime:float}, RpcAuthenticationFailures=%{NUMBER:RpcAuthenticationFailures:int}, RpcAuthenticationSuccesses=%{NUMBER:RpcAuthenticationSuccesses:int}, RpcAuthorizationFailures=%{NUMBER:RpcAuthorizationFailures:int}, RpcAuthorizationSuccesses=%{NUMBER:RpcAuthorizationSuccesses:int}, NumOpenConnections=%{NUMBER:NumOpenConnections:int}, CallQueueLength=%{NUMBER:CallQueueLength:int}"]

    #rpcdetailed.rpcdetailed
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}"]
  }
 }


if [type]=="datanode-metrics"{
  grok{
     break_on_match => false
     #metricssystem.MetricsSystem
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, NumActiveSources=%{NUMBER:NumActiveSources:int}, NumAllSources=%{NUMBER:NumAllSources:int}, NumActiveSinks=%{NUMBER:NumActiveSinks:int}, NumAllSinks=%{NUMBER:NumAllSinks:int}, Sink_diceNumOps=%{NUMBER:Sink_diceNumOps:int}, Sink_diceAvgTime=%{NUMBER:Sink_diceAvgTime:float}, Sink_diceDropped=%{NUMBER:Sink_diceDropped:int}, Sink_diceQsize=%{NUMBER:Sink_diceQsize:int}, SnapshotNumOps=%{NUMBER:SnapshotNumOps:int}, SnapshotAvgTime=%{NUMBER:SnapshotAvgTime:float}, PublishNumOps=%{NUMBER:PublishNumOps:int}, PublishAvgTime=%{NUMBER:PublishAvgTime:float}, DroppedPubAll=%{NUMBER: DroppedPubAll}"]

    #ugi.UgiMetrics
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, LoginSuccessNumOps=%{NUMBER:LoginSuccessNumOps:int}, LoginSuccessAvgTime=%{NUMBER:LoginSuccessAvgTime:float}, LoginFailureNumOps=%{NUMBER:LoginFailureNumOps:int}, LoginFailureAvgTime=%{NUMBER:LoginFailureAvgTime:float}, GetGroupsNumOps=%{NUMBER:GetGroupsNumOps:int}, GetGroupsAvgTime=%{NUMBER:GetGroupsAvgTime:float}
    "]

    #jvm.JvmMetrics
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, ProcessName=%{WORD:ProcessName}, SessionId=%{WORD:SessionId}, Hostname=%{HOSTNAME:hostname}, MemNonHeapUsedM=%{NUMBER:MemNonHeapUsedM:float}, MemNonHeapCommittedM=%{NUMBER:MemNonHeapCommittedM:float}, MemNonHeapMaxM=%{NUMBER:MemNonHeapMaxM:float}, MemHeapUsedM=%{NUMBER:MemHeapUsedM:float}, MemHeapCommittedM=%{NUMBER:MemHeapCommittedM:float}, MemHeapMaxM=%{NUMBER:MemHeapMaxM:float}, MemMaxM=%{NUMBER:MemMaxM:float}, GcCountParNew=%{NUMBER:GcCountParNew:int}, GcTimeMillisParNew=%{NUMBER:GcTimeMillisParNew:float}, GcCountConcurrentMarkSweep=%{NUMBER:GcCountConcurrentMarkSweep:float}, GcTimeMillisConcurrentMarkSweep=%{NUMBER:GcTimeMillisConcurrentMarkSweep:float}, GcCount=%{NUMBER:GcCount:int}, GcTimeMillis=%{NUMBER:GcTimeMillis:float}, GcNumWarnThresholdExceeded=%{NUMBER:GcNumWarnThresholdExceeded:int}, GcNumInfoThresholdExceeded=%{NUMBER:GcNumInfoThresholdExceeded:int}, GcTotalExtraSleepTime=%{NUMBER:GcTotalExtraSleepTime:int}, ThreadsNew=%{NUMBER:ThreadsNew:int}, ThreadsRunnable=%{NUMBER:ThreadsRunnable:int}, ThreadsBlocked=%{NUMBER:ThreadsBlocked:int}, ThreadsWaiting=%{NUMBER:ThreadsWaiting:int}, ThreadsTimedWaiting=%{NUMBER:ThreadsTimedWaiting:int}, ThreadsTerminated=%{NUMBER:ThreadsTerminated:int}, LogFatal=%{NUMBER:LogFatal:int}, LogError=%{NUMBER:LogError:int}, LogWarn=%{NUMBER:LogWarn:int}, LogInfo=%{NUMBER:LogInfo:int}"]

    #dfs.datanode
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: SessionId=%{WORD:SessionId}, Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, BytesWritten=%{NUMBER:BytesWritten:int}, BytesRead=%{NUMBER:BytesRead:int}, BlocksWritten=%{NUMBER:BlocksWritten:int}, BlocksRead=%{NUMBER:BlocksRead:int}, BlocksReplicated=%{NUMBER:BlocksReplicated:int}, BlocksRemoved=%{NUMBER:BlocksRemoved:int}, BlocksVerified=%{NUMBER:BlocksVerified:int}, BlockVerificationFailures=%{NUMBER:BlockVerificationFailures:int}, BlocksCached=%{NUMBER:BlocksCached:int}, BlocksUncached=%{NUMBER:BlocksUncached:int}, ReadsFromLocalClient=%{NUMBER:ReadsFromLocalClient:int}, ReadsFromRemoteClient=%{NUMBER:ReadsFromRemoteClient:int}, WritesFromLocalClient=%{NUMBER:WritesFromLocalClient:int}, WritesFromRemoteClient=%{NUMBER:WritesFromRemoteClient:int}, BlocksGetLocalPathInfo=%{NUMBER:BlocksGetLocalPathInfo:int}, RamDiskBlocksWrite=%{NUMBER:RamDiskBlocksWrite:int}, RamDiskBlocksWriteFallback=%{NUMBER:RamDiskBlocksWriteFallback:int}, RamDiskBytesWrite=%{NUMBER:RamDiskBytesWrite:int}, RamDiskBlocksReadHits=%{NUMBER:RamDiskBlocksReadHits:int}, RamDiskBlocksEvicted=%{NUMBER:RamDiskBlocksEvicted:int}, RamDiskBlocksEvictedWithoutRead=%{NUMBER:RamDiskBlocksEvictedWithoutRead:int}, RamDiskBlocksEvictionWindowMsNumOps=%{NUMBER:RamDiskBlocksEvictionWindowMsNumOps:int}, RamDiskBlocksEvictionWindowMsAvgTime=%{NUMBER:RamDiskBlocksEvictionWindowMsAvgTime:int}, RamDiskBlocksLazyPersisted=%{NUMBER:RamDiskBlocksLazyPersisted:int}, RamDiskBlocksDeletedBeforeLazyPersisted=%{NUMBER:RamDiskBlocksDeletedBeforeLazyPersisted:int}, RamDiskBytesLazyPersisted=%{NUMBER:RamDiskBytesLazyPersisted:int}, RamDiskBlocksLazyPersistWindowMsNumOps=%{NUMBER:RamDiskBlocksLazyPersistWindowMsNumOps:int}, RamDiskBlocksLazyPersistWindowMsAvgTime=%{NUMBER:RamDiskBlocksLazyPersistWindowMsAvgTime:int}, FsyncCount=%{NUMBER:FsyncCount:int}, VolumeFailures=%{NUMBER:VolumeFailures:int}, DatanodeNetworkErrors=%{NUMBER:DatanodeNetworkErrors:int}, ReadBlockOpNumOps=%{NUMBER:ReadBlockOpNumOps:int}, ReadBlockOpAvgTime=%{NUMBER:ReadBlockOpAvgTime:int}, WriteBlockOpNumOps=%{NUMBER:WriteBlockOpNumOps:int}, WriteBlockOpAvgTime=%{NUMBER:WriteBlockOpAvgTime:int}, BlockChecksumOpNumOps=%{NUMBER:BlockChecksumOpNumOps:int}, BlockChecksumOpAvgTime=%{NUMBER:BlockChecksumOpAvgTime:int}, CopyBlockOpNumOps=%{NUMBER:CopyBlockOpNumOps:int}, CopyBlockOpAvgTime=%{NUMBER:CopyBlockOpAvgTime:int}, ReplaceBlockOpNumOps=%{NUMBER:ReplaceBlockOpNumOps:int}, ReplaceBlockOpAvgTime=%{NUMBER:ReplaceBlockOpAvgTime:int}, HeartbeatsNumOps=%{NUMBER:HeartbeatsNumOps:int}, HeartbeatsAvgTime=%{NUMBER:HeartbeatsAvgTime:int}, BlockReportsNumOps=%{NUMBER:BlockReportsNumOps:int}, BlockReportsAvgTime=%{NUMBER:BlockReportsAvgTime:int}, CacheReportsNumOps=%{NUMBER:CacheReportsNumOps:int}, CacheReportsAvgTime=%{NUMBER:CacheReportsAvgTime:int}, PacketAckRoundTripTimeNanosNumOps=%{NUMBER:PacketAckRoundTripTimeNanosNumOps:int}, PacketAckRoundTripTimeNanosAvgTime=%{NUMBER:PacketAckRoundTripTimeNanosAvgTime:int}, FlushNanosNumOps=%{NUMBER:FlushNanosNumOps:int}, FlushNanosAvgTime=%{NUMBER:FlushNanosAvgTime:int}, FsyncNanosNumOps=%{NUMBER:FsyncNanosNumOps:int}, FsyncNanosAvgTime=%{NUMBER:FsyncNanosAvgTime:int}, SendDataPacketBlockedOnNetworkNanosNumOps=%{NUMBER:SendDataPacketBlockedOnNetworkNanosNumOps:int}, SendDataPacketBlockedOnNetworkNanosAvgTime=%{NUMBER:SendDataPacketBlockedOnNetworkNanosAvgTime:int}, SendDataPacketTransferNanosNumOps=%{NUMBER:SendDataPacketTransferNanosNumOps:int}, SendDataPacketTransferNanosAvgTime=%{NUMBER:SendDataPacketTransferNanosAvgTime:int}"]

    #rpc.rpc
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, ReceivedBytes=%{NUMBER:ReceivedBytes:int}, SentBytes=%{NUMBER:SentBytes:int}, RpcQueueTimeNumOps=%{NUMBER:RpcQueueTimeNumOps:int}, RpcQueueTimeAvgTime=%{NUMBER:RpcQueueTimeAvgTime:float}, RpcProcessingTimeNumOps=%{NUMBER:RpcProcessingTimeNumOps:int}, RpcProcessingTimeAvgTime=%{NUMBER:RpcProcessingTimeAvgTime:float}, RpcAuthenticationFailures=%{NUMBER:RpcAuthenticationFailures:int}, RpcAuthenticationSuccesses=%{NUMBER:RpcAuthenticationSuccesses:int}, RpcAuthorizationFailures=%{NUMBER:RpcAuthorizationFailures:int}, RpcAuthorizationSuccesses=%{NUMBER:RpcAuthorizationSuccesses:int}, NumOpenConnections=%{NUMBER:NumOpenConnections:int}, CallQueueLength=%{NUMBER:CallQueueLength:int}"]

    #rpcdetailed.rpcdetailed
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}"]
  }
}

if [type]=="resourcemanager-metrics"{
  grok{
    break_on_match => false
    #yarn.QueueMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Queue=%{USER:Queue}, Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, running_0=%{NUMBER:running_0:int}, running_60=%{NUMBER:running_60:int}, running_300=%{NUMBER:running_300:int}, running_1440=%{NUMBER:running_1440:int}, FairShareMB=%{NUMBER:FairShareMB:int}, FairShareVCores=%{NUMBER:FairShareVCores:int}, SteadyFairShareMB=%{NUMBER:SteadyFairShareMB:int}, SteadyFairShareVCores=%{NUMBER:SteadyFairShareVCores:int}, MinShareMB=%{NUMBER:MinShareMB:int}, MinShareVCores=%{NUMBER:MinShareVCores}, MaxShareMB=%{NUMBER:MaxShareMB}, MaxShareVCores=%{NUMBER:MaxShareVCores}, AppsSubmitted=%{NUMBER:AppsSubmitted}, AppsRunning=%{NUMBER:AppsRunning}, AppsPending=%{NUMBER:AppsPending}, AppsCompleted=%{NUMBER:AppsCompleted}, AppsKilled=%{NUMBER:AppsKilled}, AppsFailed=%{NUMBER:AppsFailed}, AllocatedMB=%{NUMBER:AllocatedMB}, AllocatedVCores=%{NUMBER:AllocatedVCores:int}, AllocatedContainers=%{NUMBER:AllocatedContainers:int}, AggregateContainersAllocated=%{NUMBER:AggregateContainersAllocated}, AggregateContainersReleased=%{NUMBER:AggregateContainersReleased}, AvailableMB=%{NUMBER:AvailableMB}, AvailableVCores=%{NUMBER:AvailableVCores:int}, PendingMB=%{NUMBER:PendingMB}, PendingVCores=%{NUMBER:PendingVCores}, PendingContainers=%{NUMBER:PendingContainers}, ReservedMB=%{NUMBER:ReservedMB}, ReservedVCores=%{NUMBER:ReservedVCores}, ReservedContainers=%{NUMBER:ReservedContainers}, ActiveUsers=%{NUMBER:ActiveUsers}, ActiveApplications=%{NUMBER:ActiveApplications}, AppAttemptFirstContainerAllocationDelayNumOps=%{NUMBER:AppAttemptFirstContainerAllocationDelayNumOps}, AppAttemptFirstContainerAllocationDelayAvgTime=%{NUMBER:AppAttemptFirstContainerAllocationDelayAvgTime}"]

    ##yarn.QueueMetrics(bis)
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Queue=%{WORD:Queue}, User=%{WORD:user}, Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, running_0=%{NUMBER:running_0}, running_60=%{NUMBER:running_60}, running_300=%{NUMBER:running_300}, running_1440=%{NUMBER:running_1440}, AppsSubmitted=%{NUMBER:AppsSubmitted}, AppsRunning=%{NUMBER:AppsRunning}, AppsPending=%{NUMBER:AppsPending}, AppsCompleted=%{NUMBER:AppsCompleted}, AppsKilled=%{NUMBER:AppsKilled}, AppsFailed=%{NUMBER:AppsFailed}, AllocatedMB=%{NUMBER:AllocatedMB}, AllocatedVCores=%{NUMBER:AllocatedVCores:int}, AllocatedContainers=%{NUMBER:AllocatedContainers:int}, AggregateContainersAllocated=%{NUMBER:AggregateContainersAllocated}, AggregateContainersReleased=%{NUMBER:AggregateContainersReleased}, AvailableMB=%{NUMBER:AvailableMB}, AvailableVCores=%{NUMBER:AvailableVCores:int}, PendingMB=%{NUMBER:PendingMB}, PendingVCores=%{NUMBER:PendingVCores}, PendingContainers=%{NUMBER:PendingContainers}, ReservedMB=%{NUMBER:ReservedMB}, ReservedVCores=%{NUMBER:ReservedVCores}, ReservedContainers=%{NUMBER:ReservedContainers}, ActiveUsers=%{NUMBER:ActiveUsers}, ActiveApplications=%{NUMBER:ActiveApplications}, AppAttemptFirstContainerAllocationDelayNumOps=%{NUMBER:AppAttemptFirstContainerAllocationDelayNumOps}, AppAttemptFirstContainerAllocationDelayAvgTime=%{NUMBER:AppAttemptFirstContainerAllocationDelayAvgTime}"]

     #rpc.rpc
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, ReceivedBytes=%{NUMBER:ReceivedBytes:int}, SentBytes=%{NUMBER:SentBytes:int}, RpcQueueTimeNumOps=%{NUMBER:RpcQueueTimeNumOps:int}, RpcQueueTimeAvgTime=%{NUMBER:RpcQueueTimeAvgTime:float}, RpcProcessingTimeNumOps=%{NUMBER:RpcProcessingTimeNumOps:int}, RpcProcessingTimeAvgTime=%{NUMBER:RpcProcessingTimeAvgTime:float}, RpcAuthenticationFailures=%{NUMBER:RpcAuthenticationFailures:int}, RpcAuthenticationSuccesses=%{NUMBER:RpcAuthenticationSuccesses:int}, RpcAuthorizationFailures=%{NUMBER:RpcAuthorizationFailures:int}, RpcAuthorizationSuccesses=%{NUMBER:RpcAuthorizationSuccesses:int}, NumOpenConnections=%{NUMBER:NumOpenConnections:int}, CallQueueLength=%{NUMBER:CallQueueLength:int}"]

     #rpcdetailed
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, RegisterNodeManagerNumOps=%{NUMBER:RegisterNodeManagerNumOps}, RegisterNodeManagerAvgTime=%{NUMBER:RegisterNodeManagerAvgTime}, NodeHeartbeatNumOps=%{NUMBER:NodeHeartbeatNumOps}, NodeHeartbeatAvgTime=%{NUMBER:NodeHeartbeatAvgTime}"]

     #rpcdetailed (bis)
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, GetFileInfoNumOps=%{NUMBER:GetFileInfoNumOps}, GetFileInfoAvgTime=%{NUMBER:GetFileInfoAvgTime}, GetListingNumOps=%{NUMBER:GetListingNumOps}, GetListingAvgTime=%{NUMBER:GetListingAvgTime}, ListCacheDirectivesNumOps=%{NUMBER:ListCacheDirectivesNumOps}, ListCacheDirectivesAvgTime=%{NUMBER:ListCacheDirectivesAvgTime}, ListCachePoolsNumOps=%{NUMBER:ListCachePoolsNumOps}, ListCachePoolsAvgTime=%{NUMBER:ListCachePoolsAvgTime}, SafeModeExceptionNumOps=%{NUMBER:SafeModeExceptionNumOps}, SafeModeExceptionAvgTime=%{NUMBER:SafeModeExceptionAvgTime}, CreateNumOps=%{NUMBER:CreateNumOps}, CreateAvgTime=%{NUMBER:CreateAvgTime}, AddBlockNumOps=%{NUMBER:AddBlockNumOps}, AddBlockAvgTime=%{NUMBER:AddBlockAvgTime}, GetServerDefaultsNumOps=%{NUMBER:GetServerDefaultsNumOps}, GetServerDefaultsAvgTime=%{NUMBER:GetServerDefaultsAvgTime}, CompleteNumOps=%{NUMBER:CompleteNumOps}, CompleteAvgTime=%{NUMBER:CompleteAvgTime}, GetBlockLocationsNumOps=%{NUMBER:GetBlockLocationsNumOps}, GetBlockLocationsAvgTime=%{NUMBER:GetBlockLocationsAvgTime}, DeleteNumOps=%{NUMBER:DeleteNumOps}, DeleteAvgTime=%{NUMBER:DeleteAvgTime}"]

     #rpcdetailed (bis2)
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, GetNewApplicationNumOps=%{NUMBER:GetNewApplicationNumOps}, GetNewApplicationAvgTime=%{NUMBER:GetNewApplicationAvgTime}, SubmitApplicationNumOps=%{NUMBER:SubmitApplicationNumOps}, SubmitApplicationAvgTime=%{NUMBER:SubmitApplicationAvgTime}, GetApplicationReportNumOps=%{NUMBER:GetApplicationReportNumOps}, GetApplicationReportAvgTime=%{NUMBER:GetApplicationReportAvgTime}, ApplicationNotFoundExceptionNumOps=%{NUMBER:ApplicationNotFoundExceptionNumOps}, ApplicationNotFoundExceptionAvgTime=%{NUMBER:ApplicationNotFoundExceptionAvgTime}"]

     #metricssystem.MetricsSystem
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, NumActiveSources=%{NUMBER:NumActiveSources:int}, NumAllSources=%{NUMBER:NumAllSources:int}, NumActiveSinks=%{NUMBER:NumActiveSinks:int}, NumAllSinks=%{NUMBER:NumAllSinks:int}, Sink_diceNumOps=%{NUMBER:Sink_diceNumOps:int}, Sink_diceAvgTime=%{NUMBER:Sink_diceAvgTime:float}, Sink_diceDropped=%{NUMBER:Sink_diceDropped:int}, Sink_diceQsize=%{NUMBER:Sink_diceQsize:int}, SnapshotNumOps=%{NUMBER:SnapshotNumOps:int}, SnapshotAvgTime=%{NUMBER:SnapshotAvgTime:float}, PublishNumOps=%{NUMBER:PublishNumOps:int}, PublishAvgTime=%{NUMBER:PublishAvgTime:float}, DroppedPubAll=%{NUMBER: DroppedPubAll}"]

     #ugi.UgiMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, LoginSuccessNumOps=%{NUMBER:LoginSuccessNumOps:int}, LoginSuccessAvgTime=%{NUMBER:LoginSuccessAvgTime:float}, LoginFailureNumOps=%{NUMBER:LoginFailureNumOps:int}, LoginFailureAvgTime=%{NUMBER:LoginFailureAvgTime:float}, GetGroupsNumOps=%{NUMBER:GetGroupsNumOps:int}, GetGroupsAvgTime=%{NUMBER:GetGroupsAvgTime:float}"]

     #jvm.JvmMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, ProcessName=%{WORD:ProcessName}, SessionId=%{WORD:SessionId}, Hostname=%{HOSTNAME:hostname}, MemNonHeapUsedM=%{NUMBER:MemNonHeapUsedM:float}, MemNonHeapCommittedM=%{NUMBER:MemNonHeapCommittedM:float}, MemNonHeapMaxM=%{NUMBER:MemNonHeapMaxM:float}, MemHeapUsedM=%{NUMBER:MemHeapUsedM:float}, MemHeapCommittedM=%{NUMBER:MemHeapCommittedM:float}, MemHeapMaxM=%{NUMBER:MemHeapMaxM:float}, MemMaxM=%{NUMBER:MemMaxM:float}, GcCountParNew=%{NUMBER:GcCountParNew:int}, GcTimeMillisParNew=%{NUMBER:GcTimeMillisParNew:float}, GcCountConcurrentMarkSweep=%{NUMBER:GcCountConcurrentMarkSweep:float}, GcTimeMillisConcurrentMarkSweep=%{NUMBER:GcTimeMillisConcurrentMarkSweep:float}, GcCount=%{NUMBER:GcCount:int}, GcTimeMillis=%{NUMBER:GcTimeMillis:float}, ThreadsNew=%{NUMBER:ThreadsNew:int}, ThreadsRunnable=%{NUMBER:ThreadsRunnable:int}, ThreadsBlocked=%{NUMBER:ThreadsBlocked:int}, ThreadsWaiting=%{NUMBER:ThreadsWaiting:int}, ThreadsTimedWaiting=%{NUMBER:ThreadsTimedWaiting:int}, ThreadsTerminated=%{NUMBER:ThreadsTerminated:int}, LogFatal=%{NUMBER:LogFatal:int}, LogError=%{NUMBER:LogError:int}, LogWarn=%{NUMBER:LogWarn:int}, LogInfo=%{NUMBER:LogInfo:int}"]

     #yarn.ClusterMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: ClusterMetrics=%{WORD:ClusterMetrics}, Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, NumActiveNMs=%{NUMBER:NumActiveNMs}, NumDecommissionedNMs=%{NUMBER:NumDecommissionedNMs}, NumLostNMs=%{NUMBER:NumLostNMs}, NumUnhealthyNMs=%{NUMBER:NumUnhealthyNMs}, NumRebootedNMs=%{NUMBER:NumRebootedNMs}, AMLaunchDelayNumOps=%{NUMBER:AMLaunchDelayNumOps}, AMLaunchDelayAvgTime=%{NUMBER:AMLaunchDelayAvgTime}, AMRegisterDelayNumOps=%{NUMBER:AMRegisterDelayNumOps}, AMRegisterDelayAvgTime=%{NUMBER:AMRegisterDelayAvgTime}"]

     #fairscheduler-op-durations.FSOpDurations
     match=>["message","\A%{NUMBER:job_id} %{NOTSPACE:serviceType}.%{WORD:serviceMetrics}: FSOpDurations=FSOpDurations, Context=%{NOTSPACE:context}, Hostname=%{HOSTNAME}, ContinuousSchedulingRunNumOps=%{NUMBER:ContinuousSchedulingRunNumOps}, ContinuousSchedulingRunAvgTime=%{NUMBER:ContinuousSchedulingRunAvgTime}, ContinuousSchedulingRunStdevTime=%{NUMBER:ContinuousSchedulingRunStdevTime}, ContinuousSchedulingRunIMinTime=%{NUMBER:ContinuousSchedulingRunIMinTime}, ContinuousSchedulingRunIMaxTime=%{NUMBER:ContinuousSchedulingRunIMaxTime}, ContinuousSchedulingRunMinTime=%{NUMBER:ContinuousSchedulingRunMinTime}, ContinuousSchedulingRunMaxTime=%{NUMBER:ContinuousSchedulingRunMaxTime}, NodeUpdateCallNumOps=%{NUMBER:NodeUpdateCallNumOps}, NodeUpdateCallAvgTime=%{NUMBER:NodeUpdateCallAvgTime}, NodeUpdateCallStdevTime=%{NUMBER:NodeUpdateCallStdevTime}, NodeUpdateCallIMinTime=%{NUMBER:NodeUpdateCallIMinTime}, NodeUpdateCallIMaxTime=%{NOTSPACE:NodeUpdateCallIMaxTime}, NodeUpdateCallMinTime=%{NUMBER:NodeUpdateCallMinTime}, NodeUpdateCallMaxTime=%{NUMBER:NodeUpdateCallMaxTime}, UpdateThreadRunNumOps=%{NUMBER:UpdateThreadRunNumOps}, UpdateThreadRunAvgTime=%{NUMBER:UpdateThreadRunAvgTime}, UpdateThreadRunStdevTime=%{NUMBER:UpdateThreadRunStdevTime}, UpdateThreadRunIMinTime=%{NUMBER:UpdateThreadRunIMinTime}, UpdateThreadRunIMaxTime=%{NUMBER:UpdateThreadRunIMaxTime}, UpdateThreadRunMinTime=%{NUMBER:UpdateThreadRunMinTime}, UpdateThreadRunMaxTime=%{NUMBER:UpdateThreadRunMaxTime}, UpdateCallNumOps=%{NUMBER:UpdateCallNumOps}, UpdateCallAvgTime=%{NUMBER:UpdateCallAvgTime}, UpdateCallStdevTime=%{NUMBER:UpdateCallStdevTime}, UpdateCallIMinTime=%{NUMBER:UpdateCallIMinTime}, UpdateCallIMaxTime=%{NUMBER:UpdateCallIMaxTime}, UpdateCallMinTime=%{NUMBER:UpdateCallMinTime}, UpdateCallMaxTime=%{NUMBER:UpdateCallMaxTime}, PreemptCallNumOps=%{NUMBER:PreemptCallNumOps}, PreemptCallAvgTime=%{NUMBER:PreemptCallAvgTime}, PreemptCallStdevTime=%{NUMBER:PreemptCallStdevTime}, PreemptCallIMinTime=%{NOTSPACE:PreemptCallIMinTime}, PreemptCallIMaxTime=%{NOTSPACE:PreemptCallIMaxTime}, PreemptCallMinTime=%{NOTSPACE:PreemptCallMinTime}, PreemptCallMaxTime=%{NOTSPACE:PreemptCallMaxTime}"]
  }
}

if [type]=="namenode-metrics"{
  grok{
    break_on_match => false
    #dfs.namenode
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: ProcessName=%{WORD:ProcessName}, SessionId=%{WORD:SessionId}, Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, CreateFileOps=%{NUMBER:CreateFileOps:float}, FilesCreated=%{NUMBER:FilesCreated:float}, FilesAppended=%{NUMBER:FilesAppended:float}, GetBlockLocations=%{NUMBER:GetBlockLocations:float}, FilesRenamed=%{NUMBER:FilesRenamed:float}, GetListingOps=%{NUMBER:GetListingOps:float}, DeleteFileOps=%{NUMBER:DeleteFileOps:float}, FilesDeleted=%{NUMBER:FilesDeleted:float}, FileInfoOps=%{NUMBER:FileInfoOps:float}, AddBlockOps=%{NUMBER:AddBlockOps:float}, GetAdditionalDatanodeOps=%{NUMBER:GetAdditionalDatanodeOps:float}, CreateSymlinkOps=%{NUMBER:CreateSymlinkOps:float}, GetLinkTargetOps=%{NUMBER:GetLinkTargetOps:float}, FilesInGetListingOps=%{NUMBER:FilesInGetListingOps:float}, AllowSnapshotOps=%{NUMBER:AllowSnapshotOps:float}, DisallowSnapshotOps=%{NUMBER:DisallowSnapshotOps:float}, CreateSnapshotOps=%{NUMBER:CreateSnapshotOps:float}, DeleteSnapshotOps=%{NUMBER:DeleteSnapshotOps:float}, RenameSnapshotOps=%{NUMBER:RenameSnapshotOps:float}, ListSnapshottableDirOps=%{NUMBER:ListSnapshottableDirOps:float}, SnapshotDiffReportOps=%{NUMBER:SnapshotDiffReportOps:float}, BlockReceivedAndDeletedOps=%{NUMBER:BlockReceivedAndDeletedOps:float}, StorageBlockReportOps=%{NUMBER:StorageBlockReportOps:float}, TransactionsNumOps=%{NUMBER:TransactionsNumOps:float}, TransactionsAvgTime=%{NUMBER:TransactionsAvgTime:float}, SyncsNumOps=%{NUMBER:SyncsNumOps:float}, SyncsAvgTime=%{NUMBER:SyncsAvgTime:float}, TransactionsBatchedInSync=%{NUMBER:TransactionsBatchedInSync:float}, BlockReportNumOps=%{NUMBER:BlockReportNumOps:float}, BlockReportAvgTime=%{NUMBER:BlockReportAvgTime:float}, CacheReportNumOps=%{NUMBER:CacheReportNumOps:float}, CacheReportAvgTime=%{NUMBER:CacheReportAvgTime:float}, SafeModeTime=%{NUMBER:SafeModeTime:float}, FsImageLoadTime=%{NUMBER:FsImageLoadTime:float}, GetEditNumOps=%{NUMBER:GetEditNumOps:float}, GetEditAvgTime=%{NUMBER:GetEditAvgTime:float}, GetImageNumOps=%{NUMBER:GetImageNumOps:float}, GetImageAvgTime=%{NUMBER:GetImageAvgTime:float}, PutImageNumOps=%{NUMBER:PutImageNumOps:float}, PutImageAvgTime=%{NUMBER:PutImageAvgTime:float}"]

     #default.StartupProgress
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Hostname=%{HOSTNAME:hostname}, ElapsedTime=%{NUMBER:ElapsedTime}, PercentComplete=%{NUMBER:PercentComplete}, LoadingFsImageCount=%{NUMBER:LoadingFsImageCount}, LoadingFsImageElapsedTime=%{NUMBER:LoadingFsImageElapsedTime}, LoadingFsImageTotal=%{NUMBER:LoadingFsImageTotal}, LoadingFsImagePercentComplete=%{NUMBER:LoadingFsImagePercentComplete}, LoadingEditsCount=%{NUMBER:LoadingEditsCount}, LoadingEditsElapsedTime=%{NUMBER:LoadingEditsElapsedTime}, LoadingEditsTotal=%{NUMBER:LoadingEditsTotal}, LoadingEditsPercentComplete=%{NUMBER:LoadingEditsPercentComplete}, SavingCheckpointCount=%{NUMBER:SavingCheckpointCount}, SavingCheckpointElapsedTime=%{NUMBER:SavingCheckpointElapsedTime}, SavingCheckpointTotal=%{NUMBER:SavingCheckpointTotal}, SavingCheckpointPercentComplete=%{NUMBER:SavingCheckpointPercentComplete}, SafeModeCount=%{NUMBER:SafeModeCount}, SafeModeElapsedTime=%{NUMBER:SafeModeElapsedTime}, SafeModeTotal=%{NUMBER:SafeModeTotal}, SafeModePercentComplete=%{NUMBER:SafeModePercentComplete}"]

     #rpc.RetryCache.NameNodeRetryCache
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}.%{WORD:serviceMetrics2}: Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, CacheHit=%{NUMBER:CacheHit}, CacheCleared=%{NUMBER:CacheCleared}, CacheUpdated=%{NUMBER:CacheUpdated}"]

     #rpc.rpc
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, ReceivedBytes=%{NUMBER:ReceivedBytes:int}, SentBytes=%{NUMBER:SentBytes:int}, RpcQueueTimeNumOps=%{NUMBER:RpcQueueTimeNumOps:int}, RpcQueueTimeAvgTime=%{NUMBER:RpcQueueTimeAvgTime:float}, RpcProcessingTimeNumOps=%{NUMBER:RpcProcessingTimeNumOps:int}, RpcProcessingTimeAvgTime=%{NUMBER:RpcProcessingTimeAvgTime:float}, RpcAuthenticationFailures=%{NUMBER:RpcAuthenticationFailures:int}, RpcAuthenticationSuccesses=%{NUMBER:RpcAuthenticationSuccesses:int}, RpcAuthorizationFailures=%{NUMBER:RpcAuthorizationFailures:int}, RpcAuthorizationSuccesses=%{NUMBER:RpcAuthorizationSuccesses:int}, NumOpenConnections=%{NUMBER:NumOpenConnections:int}, CallQueueLength=%{NUMBER:CallQueueLength:int}"]

     #rpcdetailed.rpcdetailed
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, IOExceptionNumOps=%{NUMBER:IOExceptionNumOps}, IOExceptionAvgTime=%{NUMBER:IOExceptionAvgTime}, VersionRequestNumOps=%{NUMBER:VersionRequestNumOps}, VersionRequestAvgTime=%{NUMBER:VersionRequestAvgTime}, RegisterDatanodeNumOps=%{NUMBER:RegisterDatanodeNumOps}, RegisterDatanodeAvgTime=%{NUMBER:RegisterDatanodeAvgTime}, SendHeartbeatNumOps=%{NUMBER:SendHeartbeatNumOps}, SendHeartbeatAvgTime=%{NUMBER:SendHeartbeatAvgTime}, BlockReportNumOps=%{NUMBER:BlockReportNumOps}, BlockReportAvgTime=%{NUMBER:BlockReportAvgTime}, CacheReportNumOps=%{NUMBER:CacheReportNumOps}, CacheReportAvgTime=%{NUMBER:CacheReportAvgTime}, GetTransactionIdNumOps=%{NUMBER:GetTransactionIdNumOps}, GetTransactionIdAvgTime=%{NUMBER:GetTransactionIdAvgTime}, BlockReceivedAndDeletedNumOps=%{NUMBER:BlockReceivedAndDeletedNumOps}, BlockReceivedAndDeletedAvgTime=%{NUMBER:BlockReceivedAndDeletedAvgTime}, RollEditLogNumOps=%{NUMBER:RollEditLogNumOps}, RollEditLogAvgTime=%{NUMBER:RollEditLogAvgTime}, GetEditLogManifestNumOps=%{NUMBER:GetEditLogManifestNumOps}, GetEditLogManifestAvgTime=%{NUMBER:GetEditLogManifestAvgTime}"]

     #rpcdetailed.rpcdetailed (bis)
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, GetFileInfoNumOps=%{NUMBER:GetFileInfoNumOps}, GetFileInfoAvgTime=%{NUMBER:GetFileInfoAvgTime}, GetListingNumOps=%{NUMBER:GetListingNumOps}, GetListingAvgTime=%{NUMBER:GetListingAvgTime}, SafeModeExceptionNumOps=%{NUMBER:SafeModeExceptionNumOps}, SafeModeExceptionAvgTime=%{NUMBER:SafeModeExceptionAvgTime}, DeleteNumOps=%{NUMBER:DeleteNumOps}, DeleteAvgTime=%{NUMBER:DeleteAvgTime}, ListCacheDirectivesNumOps=%{NUMBER:ListCacheDirectivesNumOps}, ListCacheDirectivesAvgTime=%{NUMBER:ListCacheDirectivesAvgTime}, ListCachePoolsNumOps=%{NUMBER:ListCachePoolsNumOps}, ListCachePoolsAvgTime=%{NUMBER:ListCachePoolsAvgTime}, CreateNumOps=%{NUMBER:CreateNumOps}, CreateAvgTime=%{NUMBER:CreateAvgTime}, AddBlockNumOps=%{NUMBER:AddBlockNumOps}, AddBlockAvgTime=%{NUMBER:AddBlockAvgTime}, GetServerDefaultsNumOps=%{NUMBER:GetServerDefaultsNumOps}, GetServerDefaultsAvgTime=%{NUMBER:GetServerDefaultsAvgTime}, CompleteNumOps=%{NUMBER:CompleteNumOps}, CompleteAvgTime=%{NUMBER:CompleteAvgTime}, GetBlockLocationsNumOps=%{NUMBER:GetBlockLocationsNumOps}, GetBlockLocationsAvgTime=%{NUMBER:GetBlockLocationsAvgTime}"]

     #rpcdetailed.rpcdetailed (bis2)
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}"]

     #dfs.FSNamesystem
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, HAState=%{WORD:HAState}, Hostname=%{HOSTNAME:hostname}, MissingBlocks=%{NUMBER:MissingBlocks}, MissingReplOneBlocks=%{NUMBER:MissingReplOneBlocks}, ExpiredHeartbeats=%{NUMBER:ExpiredHeartbeats}, TransactionsSinceLastCheckpoint=%{NUMBER:TransactionsSinceLastCheckpoint}, TransactionsSinceLastLogRoll=%{NUMBER:TransactionsSinceLastLogRoll}, LastWrittenTransactionId=%{NUMBER:LastWrittenTransactionId}, LastCheckpointTime=%{NUMBER:LastCheckpointTime}, CapacityTotal=%{NUMBER:CapacityTotal}, CapacityTotalGB=%{NUMBER:CapacityTotalGB}, CapacityUsed=%{NUMBER:CapacityUsed}, CapacityUsedGB=%{NUMBER:CapacityUsedGB}, CapacityRemaining=%{NUMBER:CapacityRemaining}, CapacityRemainingGB=%{NUMBER:CapacityRemainingGB}, CapacityUsedNonDFS=%{NUMBER:CapacityUsedNonDFS}, TotalLoad=%{NUMBER:TotalLoad}, SnapshottableDirectories=%{NUMBER:SnapshottableDirectories}, Snapshots=%{NUMBER:Snapshots}, BlocksTotal=%{NUMBER:BlocksTotal}, FilesTotal=%{NUMBER:FilesTotal}, PendingReplicationBlocks=%{NUMBER:PendingReplicationBlocks}, UnderReplicatedBlocks=%{NUMBER:UnderReplicatedBlocks}, CorruptBlocks=%{NUMBER:CorruptBlocks}, ScheduledReplicationBlocks=%{NUMBER:ScheduledReplicationBlocks}, PendingDeletionBlocks=%{NUMBER:PendingDeletionBlocks}, ExcessBlocks=%{NUMBER:ExcessBlocks}, PostponedMisreplicatedBlocks=%{NUMBER:PostponedMisreplicatedBlocks}, PendingDataNodeMessageCount=%{NUMBER:PendingDataNodeMessageCount}, MillisSinceLastLoadedEdits=%{NUMBER:MillisSinceLastLoadedEdits}, BlockCapacity=%{NUMBER:BlockCapacity}, StaleDataNodes=%{NUMBER:StaleDataNodes}, TotalFiles=%{NUMBER:TotalFiles}"]


     #metricssystem.MetricsSystem
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, NumActiveSources=%{NUMBER:NumActiveSources:int}, NumAllSources=%{NUMBER:NumAllSources:int}, NumActiveSinks=%{NUMBER:NumActiveSinks:int}, NumAllSinks=%{NUMBER:NumAllSinks:int}, Sink_diceNumOps=%{NUMBER:Sink_diceNumOps:int}, Sink_diceAvgTime=%{NUMBER:Sink_diceAvgTime:float}, Sink_diceDropped=%{NUMBER:Sink_diceDropped:int}, Sink_diceQsize=%{NUMBER:Sink_diceQsize:int}, SnapshotNumOps=%{NUMBER:SnapshotNumOps:int}, SnapshotAvgTime=%{NUMBER:SnapshotAvgTime:float}, PublishNumOps=%{NUMBER:PublishNumOps:int}, PublishAvgTime=%{NUMBER:PublishAvgTime:float}, DroppedPubAll=%{NUMBER: DroppedPubAll}"]

     #ugi.UgiMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, LoginSuccessNumOps=%{NUMBER:LoginSuccessNumOps:int}, LoginSuccessAvgTime=%{NUMBER:LoginSuccessAvgTime:float}, LoginFailureNumOps=%{NUMBER:LoginFailureNumOps:int}, LoginFailureAvgTime=%{NUMBER:LoginFailureAvgTime:float}, GetGroupsNumOps=%{NUMBER:GetGroupsNumOps:int}, GetGroupsAvgTime=%{NUMBER:GetGroupsAvgTime:float}"]

     #jvm.JvmMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, ProcessName=%{WORD:ProcessName}, SessionId=%{WORD:SessionId}, Hostname=%{HOSTNAME:hostname}, MemNonHeapUsedM=%{NUMBER:MemNonHeapUsedM:float}, MemNonHeapCommittedM=%{NUMBER:MemNonHeapCommittedM:float}, MemNonHeapMaxM=%{NUMBER:MemNonHeapMaxM:float}, MemHeapUsedM=%{NUMBER:MemHeapUsedM:float}, MemHeapCommittedM=%{NUMBER:MemHeapCommittedM:float}, MemHeapMaxM=%{NUMBER:MemHeapMaxM:float}, MemMaxM=%{NUMBER:MemMaxM:float}, GcCountParNew=%{NUMBER:GcCountParNew:int}, GcTimeMillisParNew=%{NUMBER:GcTimeMillisParNew:float}, GcCountConcurrentMarkSweep=%{NUMBER:GcCountConcurrentMarkSweep:float}, GcTimeMillisConcurrentMarkSweep=%{NUMBER:GcTimeMillisConcurrentMarkSweep:float}, GcCount=%{NUMBER:GcCount:int}, GcTimeMillis=%{NUMBER:GcTimeMillis:float}, GcNumWarnThresholdExceeded=%{NUMBER:GcNumWarnThresholdExceeded:int}, GcNumInfoThresholdExceeded=%{NUMBER:GcNumInfoThresholdExceeded:int}, GcTotalExtraSleepTime=%{NUMBER:GcTotalExtraSleepTime:int}, ThreadsNew=%{NUMBER:ThreadsNew:int}, ThreadsRunnable=%{NUMBER:ThreadsRunnable:int}, ThreadsBlocked=%{NUMBER:ThreadsBlocked:int}, ThreadsWaiting=%{NUMBER:ThreadsWaiting:int}, ThreadsTimedWaiting=%{NUMBER:ThreadsTimedWaiting:int}, ThreadsTerminated=%{NUMBER:ThreadsTerminated:int}, LogFatal=%{NUMBER:LogFatal:int}, LogError=%{NUMBER:LogError:int}, LogWarn=%{NUMBER:LogWarn:int}, LogInfo=%{NUMBER:LogInfo:int}"]

  }
}

if [type]=="secondarynamenode-metrics"{
  grok{
    break_on_match => false
    #metricssystem.MetricsSystem
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, NumActiveSources=%{NUMBER:NumActiveSources:int}, NumAllSources=%{NUMBER:NumAllSources:int}, NumActiveSinks=%{NUMBER:NumActiveSinks:int}, NumAllSinks=%{NUMBER:NumAllSinks:int}, Sink_diceNumOps=%{NUMBER:Sink_diceNumOps:int}, Sink_diceAvgTime=%{NUMBER:Sink_diceAvgTime:float}, Sink_diceDropped=%{NUMBER:Sink_diceDropped:int}, Sink_diceQsize=%{NUMBER:Sink_diceQsize:int}, SnapshotNumOps=%{NUMBER:SnapshotNumOps:int}, SnapshotAvgTime=%{NUMBER:SnapshotAvgTime:float}, PublishNumOps=%{NUMBER:PublishNumOps:int}, PublishAvgTime=%{NUMBER:PublishAvgTime:float}, DroppedPubAll=%{NUMBER: DroppedPubAll:int}"]

     #ugi.UgiMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, LoginSuccessNumOps=%{NUMBER:LoginSuccessNumOps:int}, LoginSuccessAvgTime=%{NUMBER:LoginSuccessAvgTime:float}, LoginFailureNumOps=%{NUMBER:LoginFailureNumOps:int}, LoginFailureAvgTime=%{NUMBER:LoginFailureAvgTime:float}, GetGroupsNumOps=%{NUMBER:GetGroupsNumOps:int}, GetGroupsAvgTime=%{NUMBER:GetGroupsAvgTime:float}"]

     #jvm.JvmMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, ProcessName=%{WORD:ProcessName}, SessionId=%{WORD:SessionId}, Hostname=%{HOSTNAME:hostname}, MemNonHeapUsedM=%{NUMBER:MemNonHeapUsedM:float}, MemNonHeapCommittedM=%{NUMBER:MemNonHeapCommittedM:float}, MemNonHeapMaxM=%{NUMBER:MemNonHeapMaxM:float}, MemHeapUsedM=%{NUMBER:MemHeapUsedM:float}, MemHeapCommittedM=%{NUMBER:MemHeapCommittedM:float}, MemHeapMaxM=%{NUMBER:MemHeapMaxM:float}, MemMaxM=%{NUMBER:MemMaxM:float}, GcCountParNew=%{NUMBER:GcCountParNew:int}, GcTimeMillisParNew=%{NUMBER:GcTimeMillisParNew:float}, GcCountConcurrentMarkSweep=%{NUMBER:GcCountConcurrentMarkSweep:float}, GcTimeMillisConcurrentMarkSweep=%{NUMBER:GcTimeMillisConcurrentMarkSweep:float}, GcCount=%{NUMBER:GcCount:int}, GcTimeMillis=%{NUMBER:GcTimeMillis:float}, ThreadsNew=%{NUMBER:ThreadsNew:int}, ThreadsRunnable=%{NUMBER:ThreadsRunnable:int}, ThreadsBlocked=%{NUMBER:ThreadsBlocked:int}, ThreadsWaiting=%{NUMBER:ThreadsWaiting:int}, ThreadsTimedWaiting=%{NUMBER:ThreadsTimedWaiting:int}, ThreadsTerminated=%{NUMBER:ThreadsTerminated:int}, LogFatal=%{NUMBER:LogFatal:int}, LogError=%{NUMBER:LogError:int}, LogWarn=%{NUMBER:LogWarn:int}, LogInfo=%{NUMBER:LogInfo:int}"]
  }
}

if [type]=="reducetask-metrics"{
    grok{
      break_on_match => false

     #ugi.UgiMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, LoginSuccessNumOps=%{NUMBER:LoginSuccessNumOps:int}, LoginSuccessAvgTime=%{NUMBER:LoginSuccessAvgTime:float}, LoginFailureNumOps=%{NUMBER:LoginFailureNumOps:int}, LoginFailureAvgTime=%{NUMBER:LoginFailureAvgTime:float}, GetGroupsNumOps=%{NUMBER:GetGroupsNumOps:int}, GetGroupsAvgTime=%{NUMBER:GetGroupsAvgTime:float}"]

     #jvm.JvmMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, ProcessName=%{WORD:ProcessName}, SessionId=, Hostname=%{HOSTNAME:hostname}, MemNonHeapUsedM=%{NUMBER:MemNonHeapUsedM:float}, MemNonHeapCommittedM=%{NUMBER:MemNonHeapCommittedM:float}, MemNonHeapMaxM=%{NOTSPACE:MemNonHeapMaxM:float}, MemHeapUsedM=%{NUMBER:MemHeapUsedM:float}, MemHeapCommittedM=%{NUMBER:MemHeapCommittedM:float}, MemHeapMaxM=%{NUMBER:MemHeapMaxM:float}, MemMaxM=%{NUMBER:MemMaxM:float}, GcCountPS Scavenge=%{NUMBER:GcCountPS_Scavenge}, GcTimeMillisPS Scavenge=%{NUMBER:GcTimeMillisPS_Scavenge}, GcCountPS MarkSweep=%{NUMBER:GcCountPS_MarkSweep}, GcTimeMillisPS_MarkSweep=%{NUMBER:GcTimeMillisPS_MarkSweep}, GcCount=%{NUMBER:GcCount:int}, GcTimeMillis=%{NUMBER:GcTimeMillis:float}, ThreadsNew=%{NUMBER:ThreadsNew:int}, ThreadsRunnable=%{NUMBER:ThreadsRunnable:int}, ThreadsBlocked=%{NUMBER:ThreadsBlocked:int}, ThreadsWaiting=%{NUMBER:ThreadsWaiting:int}, ThreadsTimedWaiting=%{NUMBER:ThreadsTimedWaiting:int}, ThreadsTerminated=%{NUMBER:ThreadsTerminated:int}, LogFatal=%{NUMBER:LogFatal:int}, LogError=%{NUMBER:LogError:int}, LogWarn=%{NUMBER:LogWarn:int}, LogInfo=%{NUMBER:LogInfo:int}"]

     #metricssystem.MetricsSystem
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, NumActiveSources=%{NUMBER:NumActiveSources:int}, NumAllSources=%{NUMBER:NumAllSources:int}, NumActiveSinks=%{NUMBER:NumActiveSinks:int}, NumAllSinks=%{NUMBER:NumAllSinks:int}, Sink_diceNumOps=%{NUMBER:Sink_diceNumOps:int}, Sink_diceAvgTime=%{NUMBER:Sink_diceAvgTime}, Sink_diceDropped=%{NUMBER:Sink_diceDropped:int}, Sink_diceQsize=%{NUMBER:Sink_diceQsize:int}, SnapshotNumOps=%{NUMBER:SnapshotNumOps:int}, SnapshotAvgTime=%{NUMBER:SnapshotAvgTime}, PublishNumOps=%{NUMBER:PublishNumOps:int}, PublishAvgTime=%{NUMBER:PublishAvgTime}, DroppedPubAll=%{NUMBER:DroppedPubAll}"]
    }
}

if [type]=="mrappmaster-metrics"{
    grok{
      break_on_match => false

     #jvm.JvmMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, ProcessName=%{WORD:ProcessName}, SessionId=%{WORD:SessionId}, Hostname=%{HOSTNAME:hostname}, MemNonHeapUsedM=%{NUMBER:MemNonHeapUsedM:float}, MemNonHeapCommittedM=%{NUMBER:MemNonHeapCommittedM:float}, MemNonHeapMaxM=%{NOTSPACE:MemNonHeapMaxM:float}, MemHeapUsedM=%{NUMBER:MemHeapUsedM:float}, MemHeapCommittedM=%{NUMBER:MemHeapCommittedM:float}, MemHeapMaxM=%{NUMBER:MemHeapMaxM:float}, MemMaxM=%{NUMBER:MemMaxM:float}, GcCountPS Scavenge=%{NUMBER:GcCountPS_Scavenge}, GcTimeMillisPS Scavenge=%{NUMBER:GcTimeMillisPS_Scavenge}, GcCountPS MarkSweep=%{NUMBER:GcCountPS_MarkSweep}, GcTimeMillisPS_MarkSweep=%{NUMBER:GcTimeMillisPS_MarkSweep}, GcCount=%{NUMBER:GcCount:int}, GcTimeMillis=%{NUMBER:GcTimeMillis:float}, ThreadsNew=%{NUMBER:ThreadsNew:int}, ThreadsRunnable=%{NUMBER:ThreadsRunnable:int}, ThreadsBlocked=%{NUMBER:ThreadsBlocked:int}, ThreadsWaiting=%{NUMBER:ThreadsWaiting:int}, ThreadsTimedWaiting=%{NUMBER:ThreadsTimedWaiting:int}, ThreadsTerminated=%{NUMBER:ThreadsTerminated:int}, LogFatal=%{NUMBER:LogFatal:int}, LogError=%{NUMBER:LogError:int}, LogWarn=%{NUMBER:LogWarn:int}, LogInfo=%{NUMBER:LogInfo:int}"]

     #ugi.UgiMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, LoginSuccessNumOps=%{NUMBER:LoginSuccessNumOps:int}, LoginSuccessAvgTime=%{NUMBER:LoginSuccessAvgTime:float}, LoginFailureNumOps=%{NUMBER:LoginFailureNumOps:int}, LoginFailureAvgTime=%{NUMBER:LoginFailureAvgTime:float}, GetGroupsNumOps=%{NUMBER:GetGroupsNumOps:int}, GetGroupsAvgTime=%{NUMBER:GetGroupsAvgTime:float}"]

     #mapred.MRAppMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, JobsSubmitted=%{NUMBER:JobsSubmitted}, JobsCompleted=%{NUMBER:JobsCompleted}, JobsFailed=%{NUMBER:JobsFailed}, JobsKilled=%{NUMBER:JobsKilled}, JobsPreparing=%{NUMBER:JobsPreparing}, JobsRunning=%{NUMBER:JobsRunning}, MapsLaunched=%{NUMBER:MapsLaunched}, MapsCompleted=%{NUMBER:MapsCompleted}, MapsFailed=%{NUMBER:MapsFailed}, MapsKilled=%{NUMBER:MapsKilled}, MapsRunning=%{NUMBER:MapsRunning}, MapsWaiting=%{NUMBER:MapsWaiting}, ReducesLaunched=%{NUMBER:ReducesLaunched}, ReducesCompleted=%{NUMBER:ReducesCompleted}, ReducesFailed=%{NUMBER:ReducesFailed}, ReducesKilled=%{NUMBER:ReducesKilled}, ReducesRunning=%{NUMBER:ReducesRunning}, ReducesWaiting=%{NUMBER}"]

     #rpc.rpc
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, ReceivedBytes=%{NUMBER:ReceivedBytes:int}, SentBytes=%{NUMBER:SentBytes:int}, RpcQueueTimeNumOps=%{NUMBER:RpcQueueTimeNumOps:int}, RpcQueueTimeAvgTime=%{NUMBER:RpcQueueTimeAvgTime:float}, RpcProcessingTimeNumOps=%{NUMBER:RpcProcessingTimeNumOps:int}, RpcProcessingTimeAvgTime=%{NUMBER:RpcProcessingTimeAvgTime:float}, RpcAuthenticationFailures=%{NUMBER:RpcAuthenticationFailures:int}, RpcAuthenticationSuccesses=%{NUMBER:RpcAuthenticationSuccesses:int}, RpcAuthorizationFailures=%{NUMBER:RpcAuthorizationFailures:int}, RpcAuthorizationSuccesses=%{NUMBER:RpcAuthorizationSuccesses:int}, NumOpenConnections=%{NUMBER:NumOpenConnections:int}, CallQueueLength=%{NUMBER:CallQueueLength:int}"]

     #rpcdetailed
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, GetJobReportNumOps=%{NUMBER:GetJobReportNumOps}, GetJobReportAvgTime=%{NUMBER:GetJobReportAvgTime}, GetTaskAttemptCompletionEventsNumOps=%{NUMBER:GetTaskAttemptCompletionEventsNumOps}, GetTaskAttemptCompletionEventsAvgTime=%{NUMBER:GetTaskAttemptCompletionEventsAvgTime}"]

     #rpcdetailed (bis)
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, DoneNumOps=%{NUMBER:DoneNumOps}, DoneAvgTime=%{NUMBER:DoneAvgTime}, FatalErrorNumOps=%{NUMBER:FatalErrorNumOps}, FatalErrorAvgTime=%{NUMBER:FatalErrorAvgTime}, GetTaskNumOps=%{NUMBER:GetTaskNumOps}, GetTaskAvgTime=%{NUMBER:GetTaskAvgTime}, CanCommitNumOps=%{NUMBER:CanCommitNumOps}, CanCommitAvgTime=%{NUMBER:CanCommitAvgTime}, CommitPendingNumOps=%{NUMBER:CommitPendingNumOps}, CommitPendingAvgTime=%{NUMBER:CommitPendingAvgTime}, FsErrorNumOps=%{NUMBER:FsErrorNumOps}, FsErrorAvgTime=%{NUMBER:FsErrorAvgTime}, ShuffleErrorNumOps=%{NUMBER:ShuffleErrorNumOps}, ShuffleErrorAvgTime=%{NUMBER:ShuffleErrorAvgTime}, GetMapCompletionEventsNumOps=%{NUMBER:GetMapCompletionEventsNumOps}, GetMapCompletionEventsAvgTime=%{NUMBER:GetMapCompletionEventsAvgTime}, PingNumOps=%{NUMBER:PingNumOps}, PingAvgTime=%{NUMBER:PingAvgTime}, ReportDiagnosticInfoNumOps=%{NUMBER:ReportDiagnosticInfoNumOps}, ReportDiagnosticInfoAvgTime=%{NUMBER:ReportDiagnosticInfoAvgTime}, StatusUpdateNumOps=%{NUMBER:StatusUpdateNumOps}, StatusUpdateAvgTime=%{NUMBER:StatusUpdateAvgTime}, ReportNextRecordRangeNumOps=%{NUMBER:ReportNextRecordRangeNumOps}, ReportNextRecordRangeAvgTime=%{NUMBER:ReportNextRecordRangeAvgTime}"]

     #metricssystem.MetricsSystem
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOSTNAME:hostname}, NumActiveSources=%{NUMBER:NumActiveSources:int}, NumAllSources=%{NUMBER:NumAllSources:int}, NumActiveSinks=%{NUMBER:NumActiveSinks:int}, NumAllSinks=%{NUMBER:NumAllSinks:int}, Sink_diceNumOps=%{NUMBER:Sink_diceNumOps:int}, Sink_diceAvgTime=%{NUMBER:Sink_diceAvgTime}, Sink_diceDropped=%{NUMBER:Sink_diceDropped:int}, Sink_diceQsize=%{NUMBER:Sink_diceQsize:int}, SnapshotNumOps=%{NUMBER:SnapshotNumOps:int}, SnapshotAvgTime=%{NUMBER:SnapshotAvgTime}, PublishNumOps=%{NUMBER:PublishNumOps:int}, PublishAvgTime=%{NUMBER:PublishAvgTime}, DroppedPubAll=%{NUMBER:DroppedPubAll}"]
    }
}
{% else %}
#No HDFS defined
{% endif %}
}
output {
  elasticsearch {
     #cluster  => {{ESCluster}} # this matches out elasticsearch cluster.name; Only for LS version 1.5.x
     #protocol => http #Only version 1.5.x
     hosts => ["{{EShostIP}}:{{EShostPort}}"] #For version 2.x of logstash
     {% if not myIndex %}
     index => "logstash-%{+YYY.MM.dd}"
     {% else %}
     index => "{{myIndex}}-%{+YYY.MM.dd}"
     {% endif %}
  }
}
